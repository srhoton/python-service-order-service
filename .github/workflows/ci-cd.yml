name: CI/CD Pipeline

# This workflow handles:
# - On pull requests: Runs tests, linting, formatting, mypy, security scanning, builds the Lambda package, and runs Terraform plan
# - On push to main: Same checks + deploys to AWS using Terraform apply
#
# Required secrets:
# - AWS_ROLE_TO_ASSUME: ARN of the IAM role to assume for AWS operations
# - SLACK_WEBHOOK_URL: (Optional) Webhook URL for Slack notifications

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: write  # Upgraded to write to allow tagging releases

env:
  PYTHON_VERSION: '3.13'
  TERRAFORM_VERSION: '1.7.4'
  AWS_REGION: 'us-east-1'

jobs:
  python-validation:
    name: Python Tests and Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        id: install-deps
        run: |
          python -m pip install --upgrade pip
          pip install -r python-service-order-service/requirements.txt
        continue-on-error: false

      - name: Run linting with ruff
        id: lint
        run: |
          pip install ruff
          echo "Running code linting..."
          ruff check python-service-order-service --output-format=github
          echo "Checking code formatting..."
          ruff format --check python-service-order-service
        continue-on-error: false

      - name: Run mypy
        id: type-check
        run: |
          pip install mypy
          echo "Running type checking..."
          mypy python-service-order-service/src/ --pretty
        continue-on-error: false
        
      - name: Run security scanning with Bandit
        id: security-scan
        run: |
          pip install bandit
          echo "Running security scan on Python code..."
          bandit -r python-service-order-service/src/ -f json -o bandit-results.json
        continue-on-error: true
          
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: bandit-results.json
          retention-days: 7

      - name: Run tests with pytest
        id: test
        run: |
          cd python-service-order-service && pytest --junitxml=test-results.xml
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: python-service-order-service/test-results.xml
          retention-days: 7

      - name: Build Lambda package
        id: build-lambda
        run: |
          echo "Building Lambda deployment package..."
          mkdir -p build
          cp -r python-service-order-service/src/* build/
          pip install -r python-service-order-service/requirements.txt --target ./build
          cd build && zip -r ../lambda_function.zip .
          echo "Package size: $(du -h ../lambda_function.zip | cut -f1)"
      
      - name: Upload Lambda package as artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: lambda_function.zip
          retention-days: 5

  terraform-validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format
        working-directory: ./python-service-order-service/terraform
        run: terraform fmt -check -recursive

      - name: Terraform Init
        id: tf-init
        working-directory: ./python-service-order-service/terraform
        run: terraform init
        
      - name: Cache Terraform
        uses: actions/cache@v3
        with:
          path: ./python-service-order-service/terraform/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Validate
        working-directory: ./python-service-order-service/terraform
        run: terraform validate

      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash

      - name: Run tflint
        working-directory: ./python-service-order-service/terraform
        run: tflint --recursive
        
      - name: Run Checkov security scan
        id: checkov
        working-directory: ./python-service-order-service/terraform
        run: |
          pip install checkov
          echo "Running security scan on Terraform code..."
          checkov -d . --framework terraform --output cli --output json --output-file-path checkov-results
        continue-on-error: true
          
      - name: Upload Terraform security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-security-results
          path: ./python-service-order-service/terraform/checkov-results
          retention-days: 7

      - name: Terraform Plan
        id: tf-plan
        working-directory: ./python-service-order-service/terraform
        run: |
          echo "Running Terraform plan..."
          terraform plan -no-color -input=false -out=tfplan
          terraform show -no-color -json tfplan > plan.json
        if: github.event_name == 'pull_request'

      - name: Upload terraform plan as artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: |
            ./python-service-order-service/terraform/tfplan
            ./python-service-order-service/terraform/plan.json
          retention-days: 5
        if: github.event_name == 'pull_request'
        
      - name: Post Plan to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const planJson = JSON.parse(fs.readFileSync('./python-service-order-service/terraform/plan.json', 'utf8'));
            
            let planSummary = '';
            if (planJson.resource_changes) {
              const creates = planJson.resource_changes.filter(r => r.change.actions[0] === 'create').length;
              const updates = planJson.resource_changes.filter(r => r.change.actions[0] === 'update').length;
              const deletes = planJson.resource_changes.filter(r => r.change.actions[0] === 'delete').length;
              
              planSummary = `
              ## Terraform Plan Summary
              
              🟢 Resources to create: ${creates}
              🟠 Resources to update: ${updates}
              🔴 Resources to delete: ${deletes}
              
              <details><summary>Show details</summary>
              
              \`\`\`
              ${require('child_process').execSync('cd ./python-service-order-service/terraform && terraform show -no-color tfplan').toString()}
              \`\`\`
              
              </details>
              `;
            } else {
              planSummary = "## Terraform Plan\n\nNo changes. Infrastructure is up-to-date.";
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: planSummary
            });

  deploy-to-aws:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    environment: production
    needs: [python-validation, terraform-validation]
    if: github.ref == 'refs/heads/main' && success()
    timeout-minutes: 30
    concurrency:
      group: production-deployment
      cancel-in-progress: false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Lambda package
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Upload Lambda package to S3
        id: upload-lambda
        run: |
          echo "Uploading Lambda package to S3..."
          LAMBDA_HASH=$(sha256sum lambda_function.zip | cut -d ' ' -f 1)
          BUCKET_NAME=$(cd python-service-order-service/terraform && terraform output -raw lambda_deployment_bucket 2>/dev/null || echo "srhoton-lambda-deployment")
          echo "Using S3 bucket: ${BUCKET_NAME}"
          S3_KEY="lambda/service-order-lambda/${LAMBDA_HASH}.zip"
          aws s3 cp lambda_function.zip "s3://${BUCKET_NAME}/${S3_KEY}"
          echo "lambda_s3_key=${S3_KEY}" >> $GITHUB_OUTPUT

      - name: Terraform Init
        working-directory: ./python-service-order-service/terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: ./python-service-order-service/terraform
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Terraform Apply
        id: tf-apply
        working-directory: ./python-service-order-service/terraform
        run: |
          echo "Applying Terraform changes..."
          terraform apply -auto-approve tfplan
          
      - name: Get deployment outputs
        if: success()
        id: terraform-outputs
        working-directory: ./python-service-order-service/terraform
        run: |
          echo "lambda_function_name=$(terraform output -raw lambda_function_name)" >> $GITHUB_OUTPUT
          echo "dynamodb_table_name=$(terraform output -raw dynamodb_table_name)" >> $GITHUB_OUTPUT
          
      - name: Configure Git
        if: success()
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          
      - name: Create Git Tag for deployment
        id: create-tag
        if: success()
        run: |
          VERSION="v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          git tag $VERSION
          git push origin $VERSION
          echo "Deployment tagged as $VERSION"
          
      - name: Post Deployment Summary
        if: success()
        run: |
          echo "## Deployment Summary :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "✅ Service Order Lambda function has been deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "  - Function name: ${{ steps.terraform-outputs.outputs.lambda_function_name }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ DynamoDB table has been provisioned" >> $GITHUB_STEP_SUMMARY
          echo "  - Table name: ${{ steps.terraform-outputs.outputs.dynamodb_table_name }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ AppConfig has been configured" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment tagged in Git repository as ${{ steps.create-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ Deployment completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          
      - name: Notify on success
        if: success() && env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
              "text": "✅ Service Order Lambda successfully deployed to production",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ *Service Order Lambda Deployment Succeeded*\n Commit: <${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}|${{ github.sha }}>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
          
  update-status:
    name: Update Deployment Status
    runs-on: ubuntu-latest
    needs: deploy-to-aws
    if: always()
    steps:
      - name: Report success
        if: needs.deploy-to-aws.result == 'success'
        run: |
          echo "## ✅ Deployment Succeeded" >> $GITHUB_STEP_SUMMARY
          echo "The Service Order Lambda has been successfully deployed to production." >> $GITHUB_STEP_SUMMARY
          
      - name: Report failure
        if: needs.deploy-to-aws.result != 'success'
        run: |
          echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "The deployment to production failed. Please check the logs for details." >> $GITHUB_STEP_SUMMARY